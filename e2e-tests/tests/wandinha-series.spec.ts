import { test, expect } from '@playwright/test';
import * as path from 'path';
import * as fs from 'fs';

/**
 * Teste E2E - Cria√ß√£o da S√©rie Wandinha
 *
 * Este teste valida o fluxo completo de:
 * 1. Acesso √† p√°gina de cria√ß√£o de conte√∫do
 * 2. Preenchimento dos metadados da s√©rie
 * 3. Adi√ß√£o de epis√≥dios (3 por temporada)
 * 4. Upload dos v√≠deos
 * 5. Publica√ß√£o da s√©rie
 */

test.describe('CineVision - Criar S√©rie Wandinha', () => {
  test('deve criar s√©rie Wandinha com epis√≥dios e fazer upload', async ({ page }) => {
    // Aumentar timeout para este teste (upload pode demorar)
    test.setTimeout(600000); // 10 minutos

    // 1. Fazer login como admin
    console.log('üîê Fazendo login como admin...');
    await page.goto('/admin/login', { waitUntil: 'domcontentloaded' });

    // Preencher credenciais
    await page.fill('input[type="email"], input[name="email"]', 'admin@cinevision.com');
    await page.fill('input[type="password"], input[name="password"]', 'Admin@2025');

    // Clicar no bot√£o de login
    await page.click('button[type="submit"], button:has-text("Entrar"), button:has-text("Login")');

    // Aguardar redirecionamento ap√≥s login
    await page.waitForTimeout(3000);
    console.log('‚úÖ Login realizado com sucesso');

    // 2. Navegar para p√°gina de cria√ß√£o
    console.log('üì± Navegando para /admin/content/create...');
    await page.goto('/admin/content/create', { waitUntil: 'domcontentloaded' });

    // Aguardar p√°gina carregar
    await page.waitForLoadState('networkidle');
    console.log('‚úÖ P√°gina carregada');

    // 2. Selecionar tipo "S√©rie"
    console.log('üé¨ Selecionando tipo: S√©rie...');
    const seriesRadio = page.locator('input[type="radio"][value="series"]');
    await seriesRadio.click();
    console.log('‚úÖ Tipo s√©rie selecionado');

    // 3. Preencher informa√ß√µes b√°sicas
    console.log('üìù Preenchendo informa√ß√µes b√°sicas...');

    // T√≠tulo
    await page.fill('input[name="title"]', 'Wandinha');

    // Descri√ß√£o
    await page.fill('textarea[name="description"]',
      'Wandinha Addams √© uma estudante inteligente, sarc√°stica e um pouco morta por dentro que est√° investigando uma onda de assassinatos enquanto faz novos amigos ‚Äî e inimigos ‚Äî na Academia Nunca Mais.'
    );

    // G√™neros
    await page.fill('input[name="genres"]', 'Terror, Com√©dia, Mist√©rio');

    // Ano de lan√ßamento
    await page.fill('input[name="release_year"]', '2022');

    // Diretor
    await page.fill('input[name="director"]', 'Tim Burton');

    // Elenco
    await page.fill('input[name="cast"]', 'Jenna Ortega, Catherine Zeta-Jones, Luis Guzm√°n');

    // Dura√ß√£o m√©dia dos epis√≥dios
    await page.fill('input[name="duration_minutes"]', '45');

    console.log('‚úÖ Informa√ß√µes b√°sicas preenchidas');

    // 4. Configurar pre√ßo
    console.log('üí∞ Configurando pre√ßo...');
    await page.fill('input[name="price_reais"]', '15.00');
    console.log('‚úÖ Pre√ßo configurado: R$ 15.00');

    // 5. Criar s√©rie (submeter formul√°rio b√°sico)
    console.log('üöÄ Criando s√©rie...');
    const createButton = page.locator('button[type="submit"]').first();
    await createButton.click();

    // Aguardar s√©rie ser criada
    await page.waitForTimeout(3000);
    console.log('‚úÖ S√©rie criada com sucesso');

    // 6. Adicionar Temporada 1
    console.log('üì∫ Adicionando Temporada 1...');
    const addSeasonButton = page.locator('button:has-text("Adicionar Temporada")');
    await addSeasonButton.click();
    await page.waitForTimeout(1000);
    console.log('‚úÖ Temporada 1 adicionada');

    // 7. Adicionar 3 epis√≥dios da Temporada 1
    const episodiosT1 = [
      { num: 1, titulo: 'O Corvo de Wandinha', descricao: 'Wandinha chega √† Academia Nunca Mais e rapidamente mostra que n√£o √© uma estudante comum.' },
      { num: 2, titulo: 'Pais que Amam S√£o Pais que Abandonam', descricao: 'Os pais de Wandinha visitam a escola para o Dia dos Pais.' },
      { num: 3, titulo: 'Amigo ou Inimigo', descricao: 'Wandinha investiga os assassinatos na floresta.' }
    ];

    for (const ep of episodiosT1) {
      console.log(`üìº Adicionando epis√≥dio T1E${ep.num}: ${ep.titulo}...`);

      // Clicar em adicionar epis√≥dio
      const addEpisodeBtn = page.locator('button:has-text("Adicionar Epis√≥dio")').first();
      await addEpisodeBtn.click();
      await page.waitForTimeout(1000);

      // Preencher dados do epis√≥dio
      const episodeCards = page.locator('[class*="episode-card"]').last();

      // T√≠tulo do epis√≥dio
      await episodeCards.locator('input[placeholder*="T√≠tulo"]').fill(ep.titulo);

      // Descri√ß√£o do epis√≥dio
      await episodeCards.locator('textarea[placeholder*="Descri√ß√£o"]').fill(ep.descricao);

      // Dura√ß√£o
      await episodeCards.locator('input[type="number"][placeholder*="Dura√ß√£o"]').fill('45');

      console.log(`‚úÖ Epis√≥dio T1E${ep.num} configurado`);
    }

    // 8. Adicionar Temporada 2
    console.log('üì∫ Adicionando Temporada 2...');
    await addSeasonButton.click();
    await page.waitForTimeout(1000);
    console.log('‚úÖ Temporada 2 adicionada');

    // 9. Adicionar 3 epis√≥dios da Temporada 2
    const episodiosT2 = [
      { num: 1, titulo: 'Um Pecado e uma Boa A√ß√£o', descricao: 'Wandinha come√ßa a segunda temporada com novos mist√©rios.' },
      { num: 2, titulo: 'A Outra Face', descricao: 'Segredos do passado v√™m √† tona.' },
      { num: 3, titulo: 'Na Tempestade', descricao: 'A investiga√ß√£o se intensifica.' }
    ];

    for (const ep of episodiosT2) {
      console.log(`üìº Adicionando epis√≥dio T2E${ep.num}: ${ep.titulo}...`);

      const addEpisodeBtn = page.locator('button:has-text("Adicionar Epis√≥dio")').last();
      await addEpisodeBtn.click();
      await page.waitForTimeout(1000);

      const episodeCards = page.locator('[class*="episode-card"]').last();

      await episodeCards.locator('input[placeholder*="T√≠tulo"]').fill(ep.titulo);
      await episodeCards.locator('textarea[placeholder*="Descri√ß√£o"]').fill(ep.descricao);
      await episodeCards.locator('input[type="number"][placeholder*="Dura√ß√£o"]').fill('45');

      console.log(`‚úÖ Epis√≥dio T2E${ep.num} configurado`);
    }

    console.log('‚úÖ Todos os epis√≥dios foram configurados');

    // 10. Selecionar arquivos de v√≠deo para os epis√≥dios
    console.log('üé• Selecionando arquivos de v√≠deo...');

    // Caminho base dos v√≠deos
    const videosPath = 'E:\\movies\\SERIE_Wandinha';

    // Verificar se o diret√≥rio existe
    if (fs.existsSync(videosPath)) {
      const files = fs.readdirSync(videosPath)
        .filter(f => f.endsWith('.mp4') || f.endsWith('.mkv'))
        .slice(0, 6); // Pegar primeiros 6 arquivos (3 de cada temporada)

      console.log(`üìÅ Encontrados ${files.length} arquivos de v√≠deo`);

      // Selecionar arquivo para cada epis√≥dio
      const fileInputs = page.locator('input[type="file"][accept*="video"]');
      const count = await fileInputs.count();

      for (let i = 0; i < Math.min(count, files.length); i++) {
        const filePath = path.join(videosPath, files[i]);
        console.log(`üì§ Selecionando v√≠deo ${i + 1}: ${files[i]}...`);

        await fileInputs.nth(i).setInputFiles(filePath);
        await page.waitForTimeout(1000);

        console.log(`‚úÖ V√≠deo ${i + 1} selecionado`);
      }

      console.log('‚úÖ Todos os v√≠deos foram selecionados');
    } else {
      console.log('‚ö†Ô∏è Diret√≥rio de v√≠deos n√£o encontrado. Pulando sele√ß√£o de arquivos.');
      console.log('‚ÑπÔ∏è Caminho esperado:', videosPath);
    }

    // 11. Tirar screenshot antes de finalizar
    await page.screenshot({
      path: 'test-results/wandinha-antes-finalizar.png',
      fullPage: true
    });
    console.log('üì∏ Screenshot salvo: wandinha-antes-finalizar.png');

    // 12. Finalizar e publicar s√©rie
    console.log('üéØ Finalizando e publicando s√©rie...');
    const finalizeButton = page.locator('button:has-text("Finalizar e Publicar")');
    await finalizeButton.click();

    // Aguardar confirma√ß√£o ou redirecionamento
    console.log('‚è≥ Aguardando processamento...');
    await page.waitForTimeout(5000);

    // Verificar se h√° mensagens de sucesso
    const successToast = page.locator('.toast-success, [class*="success"]');
    if (await successToast.isVisible({ timeout: 5000 })) {
      console.log('‚úÖ S√©rie publicada com sucesso!');
    }

    // 13. Screenshot final
    await page.screenshot({
      path: 'test-results/wandinha-apos-finalizar.png',
      fullPage: true
    });
    console.log('üì∏ Screenshot salvo: wandinha-apos-finalizar.png');

    // 14. Verificar redirecionamento para admin
    await page.waitForTimeout(2000);
    const currentUrl = page.url();
    console.log('üìç URL atual:', currentUrl);

    // Fazer uma pausa para ver o resultado
    console.log('‚è∏Ô∏è Pausando para visualiza√ß√£o (pressione qualquer tecla para continuar)...');
    await page.pause();

    console.log('‚úÖ Teste conclu√≠do com sucesso!');
  });
});
