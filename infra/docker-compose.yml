version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cine-vision-db
    environment:
      POSTGRES_DB: cine_vision
      POSTGRES_USER: cine_vision
      POSTGRES_PASSWORD: password123
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - cine-vision-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cine_vision -d cine_vision"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: cine-vision-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cine-vision-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LocalStack for AWS services emulation (S3, etc.)
  localstack:
    image: localstack/localstack:latest
    container_name: cine-vision-localstack
    environment:
      SERVICES: s3,ses
      DEBUG: 1
      DATA_DIR: /tmp/localstack/data
      DOCKER_HOST: unix:///var/run/docker.sock
      AWS_DEFAULT_REGION: us-east-1
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
    volumes:
      - "./localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    ports:
      - "4566:4566"
      - "4571:4571"
    networks:
      - cine-vision-network

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: cine-vision-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://cine_vision:password123@postgres:5432/cine_vision
      REDIS_URL: redis://redis:6379
      JWT_SECRET: cine-vision-dev-secret
      JWT_REFRESH_SECRET: cine-vision-dev-refresh-secret
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-your_bot_token_here}
      S3_ENDPOINT: http://localstack:4566
      S3_KEY: test
      S3_SECRET: test
      S3_BUCKET: cine-vision-dev
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - cine-vision-network
    volumes:
      - ../backend:/app
      - /app/node_modules
    command: npm run start:dev

  # Admin Panel
  admin:
    build:
      context: ../admin
      dockerfile: Dockerfile
    container_name: cine-vision-admin
    environment:
      NODE_ENV: development
      API_URL: http://backend:3001/api/v1
      NEXTAUTH_SECRET: cine-vision-admin-secret
      NEXTAUTH_URL: http://localhost:3002
    ports:
      - "3002:3002"
    depends_on:
      - backend
    networks:
      - cine-vision-network
    volumes:
      - ../admin:/app
      - /app/node_modules
    command: npm run dev

  # Telegram Bot
  bot:
    build:
      context: ../bot
      dockerfile: Dockerfile
    container_name: cine-vision-bot
    environment:
      NODE_ENV: development
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN:-your_bot_token_here}
      API_URL: http://backend:3001/api/v1
      FRONTEND_URL: http://localhost:3000
      BOT_PORT: 3003
    ports:
      - "3003:3003"
    depends_on:
      - backend
    networks:
      - cine-vision-network
    volumes:
      - ../bot:/app
      - /app/node_modules
    command: npm run dev

volumes:
  postgres_data:
  redis_data:

networks:
  cine-vision-network:
    driver: bridge