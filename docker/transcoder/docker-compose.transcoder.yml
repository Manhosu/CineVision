version: '3.8'

services:
  transcoder:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cine-vision-transcoder
    restart: unless-stopped

    environment:
      # Node.js
      NODE_ENV: production
      LOG_LEVEL: info

      # Redis connection
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: 0

      # AWS S3
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_VIDEO_BUCKET: ${S3_VIDEO_BUCKET}

      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_DATABASE: ${POSTGRES_DB}

      # Transcoding settings
      TRANSCODING_WORK_DIR: /tmp/transcoding
      WORKER_CONCURRENCY: 2
      FFMPEG_THREADS: 0  # 0 = auto-detect CPU cores
      SEGMENT_DURATION: 6

    volumes:
      # Temporary transcoding workspace
      - transcoding_workspace:/tmp/transcoding
      # Logs
      - ./logs:/app/logs

    networks:
      - cine-vision-network

    depends_on:
      - redis
      - postgres

    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

    # Health check
    healthcheck:
      test: ["CMD", "node", "src/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

    # Labels for monitoring
    labels:
      - "com.cinevision.service=transcoder"
      - "com.cinevision.version=${VERSION:-latest}"

  # Scaling transcoder workers
  transcoder-worker-2:
    extends: transcoder
    container_name: cine-vision-transcoder-2
    profiles: ["scale"]  # Only start with --profile scale

  transcoder-worker-3:
    extends: transcoder
    container_name: cine-vision-transcoder-3
    profiles: ["scale"]

  # Redis for queue management
  redis:
    image: redis:7-alpine
    container_name: cine-vision-redis
    restart: unless-stopped

    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru

    volumes:
      - redis_data:/data

    networks:
      - cine-vision-network

    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: cine-vision-db
    restart: unless-stopped

    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"

    volumes:
      - postgres_data:/var/lib/postgresql/data
      # Custom PostgreSQL config
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf

    networks:
      - cine-vision-network

    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Monitoring dashboard (optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    profiles: ["monitoring"]

    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD}

    ports:
      - "8082:8081"

    networks:
      - cine-vision-network

    depends_on:
      - redis

volumes:
  transcoding_workspace:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  cine-vision-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16