name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run type checking
        run: npm run build

      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          JWT_SECRET: test_secret
          NODE_ENV: test

  # Admin Panel Tests
  admin-test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./admin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./admin/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Build application
        run: npm run build
        env:
          API_URL: http://localhost:3001/api/v1

  # Bot Tests
  bot-test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./bot

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ./bot/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Run tests
        run: npm test

  # Security Audit
  security-audit:
    runs-on: ubuntu-latest
    needs: [backend-test, admin-test, bot-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Audit Backend Dependencies
        working-directory: ./backend
        run: npm audit --audit-level moderate

      - name: Audit Admin Dependencies
        working-directory: ./admin
        run: npm audit --audit-level moderate

      - name: Audit Bot Dependencies
        working-directory: ./bot
        run: npm audit --audit-level moderate

  # Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [backend-test, admin-test, bot-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: false
          tags: cine-vision-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Admin Image
        uses: docker/build-push-action@v5
        with:
          context: ./admin
          push: false
          tags: cine-vision-admin:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Bot Image
        uses: docker/build-push-action@v5
        with:
          context: ./bot
          push: false
          tags: cine-vision-bot:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [security-audit, build-images]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          # TODO: Add staging deployment commands
          echo "âœ… Staging deployment completed!"

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [security-audit, build-images]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "ðŸš€ Deploying to production environment..."
          # TODO: Add production deployment commands
          echo "âœ… Production deployment completed!"