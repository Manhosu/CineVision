require('dotenv').config();
const { S3Client, GetObjectCommand, PutObjectCommand, GetObjectAclCommand } = require('@aws-sdk/client-s3');
const { getSignedUrl } = require('@aws-sdk/s3-request-presigner');

const s3Client = new S3Client({
  region: 'us-east-2',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
});

async function diagnoseComplete() {
  console.log('üîç DIAGN√ìSTICO COMPLETO - PRESIGNED URLs\n');
  console.log('='.repeat(70));
  console.log('\nüìã CONTEXTO DO PROBLEMA:\n');
  console.log('   ‚úÖ Acesso direto via SDK funciona (HeadObject retorna 200)');
  console.log('   ‚ùå Presigned URLs retornam 403 Forbidden');
  console.log('   ‚úÖ Block Public Access: TODAS as 4 op√ß√µes DESMARCADAS');
  console.log('   ‚úÖ ACLs habilitadas com "Bucket owner preferred"');
  console.log('   ‚úÖ Credenciais: cinevision-uploader (AKIA5JDWE3OIGYJLP7VL)');
  console.log('   ‚úÖ Bucket: cinevision-video (us-east-2)');
  console.log('\n' + '='.repeat(70));

  // TESTE 1: Criar arquivo PEQUENO e testar
  console.log('\n\nüìä TESTE 1: Criar arquivo PEQUENO (1KB) e testar presigned URL\n');

  const smallKey = `test-diagnose/small-${Date.now()}.txt`;
  console.log(`   üìù Criando arquivo: ${smallKey}`);

  try {
    await s3Client.send(new PutObjectCommand({
      Bucket: 'cinevision-video',
      Key: smallKey,
      Body: 'A'.repeat(1024), // 1KB
      ContentType: 'text/plain',
    }));
    console.log('   ‚úÖ Arquivo criado com sucesso');

    // Testar presigned URL imediatamente
    const getCmd = new GetObjectCommand({
      Bucket: 'cinevision-video',
      Key: smallKey,
    });

    const presignedUrl = await getSignedUrl(s3Client, getCmd, { expiresIn: 3600 });
    console.log('   ‚úÖ Presigned URL gerada');

    const response = await fetch(presignedUrl, { method: 'HEAD' });
    console.log(`\n   üì° Resposta HTTP: ${response.status}`);

    if (response.status === 200) {
      console.log('   ‚úÖ PRESIGNED URL FUNCIONOU!');
    } else {
      console.log('   ‚ùå PRESIGNED URL FALHOU');
      const body = await response.text();
      console.log(`   üìÑ Corpo da resposta: ${body.substring(0, 300)}`);
    }
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
  }

  // TESTE 2: Verificar ACL de um v√≠deo existente
  console.log('\n\nüìä TESTE 2: Verificar ACL de v√≠deo existente\n');

  const videoKey = 'videos/c7ed9623-7bcb-4c13-91b7-6f96b76facd1/languages/dubbed-pt-BR/1760228827742-Lilo-Stitch-2025-DUBLADO.mp4';
  console.log(`   üìù Verificando: ${videoKey.substring(0, 60)}...`);

  try {
    const aclCmd = new GetObjectAclCommand({
      Bucket: 'cinevision-video',
      Key: videoKey,
    });

    const aclResult = await s3Client.send(aclCmd);
    console.log('   ‚úÖ ACL recuperada com sucesso');
    console.log(`   üë§ Owner: ${aclResult.Owner.DisplayName || aclResult.Owner.ID.substring(0, 20)}`);
    console.log(`   üîê Grants (${aclResult.Grants.length}):`);

    aclResult.Grants.forEach((grant, i) => {
      const grantee = grant.Grantee.Type === 'CanonicalUser'
        ? `CanonicalUser (${grant.Grantee.ID?.substring(0, 20)}...)`
        : grant.Grantee.URI || grant.Grantee.Type;
      console.log(`      ${i + 1}. ${grantee} ‚Üí ${grant.Permission}`);
    });
  } catch (error) {
    console.log(`   ‚ùå Erro ao recuperar ACL: ${error.message}`);
    if (error.name === 'AccessDenied') {
      console.log('   ‚ö†Ô∏è  User cinevision-uploader n√£o tem permiss√£o s3:GetObjectAcl');
    }
  }

  // TESTE 3: Analisar a estrutura da presigned URL
  console.log('\n\nüìä TESTE 3: Analisar estrutura da presigned URL\n');

  const getCmd = new GetObjectCommand({
    Bucket: 'cinevision-video',
    Key: videoKey,
  });

  const presignedUrl = await getSignedUrl(s3Client, getCmd, { expiresIn: 3600 });

  console.log('   üîó Presigned URL gerada:');
  console.log(`   ${presignedUrl.substring(0, 100)}...`);
  console.log('');

  const url = new URL(presignedUrl);
  console.log('   üìã Par√¢metros da URL:');
  console.log(`      ‚Ä¢ Host: ${url.hostname}`);
  console.log(`      ‚Ä¢ X-Amz-Algorithm: ${url.searchParams.get('X-Amz-Algorithm')}`);
  console.log(`      ‚Ä¢ X-Amz-Credential: ${url.searchParams.get('X-Amz-Credential')?.substring(0, 40)}...`);
  console.log(`      ‚Ä¢ X-Amz-Date: ${url.searchParams.get('X-Amz-Date')}`);
  console.log(`      ‚Ä¢ X-Amz-Expires: ${url.searchParams.get('X-Amz-Expires')} segundos`);
  console.log(`      ‚Ä¢ X-Amz-SignedHeaders: ${url.searchParams.get('X-Amz-SignedHeaders')}`);
  console.log(`      ‚Ä¢ X-Amz-Signature: ${url.searchParams.get('X-Amz-Signature')?.substring(0, 20)}...`);

  // TESTE 4: Comparar URLs com diferentes tempos de expira√ß√£o
  console.log('\n\nüìä TESTE 4: Testar diferentes tempos de expira√ß√£o\n');

  const expirationTimes = [60, 900, 3600, 14400]; // 1min, 15min, 1h, 4h

  for (const expTime of expirationTimes) {
    const cmd = new GetObjectCommand({
      Bucket: 'cinevision-video',
      Key: videoKey,
    });

    const url = await getSignedUrl(s3Client, cmd, { expiresIn: expTime });
    const response = await fetch(url, { method: 'HEAD' });

    const hours = Math.floor(expTime / 3600);
    const minutes = Math.floor((expTime % 3600) / 60);
    const timeStr = hours > 0 ? `${hours}h` : `${minutes}min`;

    console.log(`   ${response.status === 200 ? '‚úÖ' : '‚ùå'} ${timeStr.padEnd(6)} ‚Üí Status ${response.status}`);
  }

  // TESTE 5: Verificar se o problema √© com v√≠deos grandes
  console.log('\n\nüìä TESTE 5: Testar arquivo M√âDIO (10MB)\n');

  const mediumKey = `test-diagnose/medium-${Date.now()}.bin`;
  console.log(`   üìù Criando arquivo de 10MB: ${mediumKey}`);

  try {
    const buffer = Buffer.alloc(10 * 1024 * 1024); // 10MB
    await s3Client.send(new PutObjectCommand({
      Bucket: 'cinevision-video',
      Key: mediumKey,
      Body: buffer,
      ContentType: 'application/octet-stream',
    }));
    console.log('   ‚úÖ Arquivo de 10MB criado');

    const getCmd = new GetObjectCommand({
      Bucket: 'cinevision-video',
      Key: mediumKey,
    });

    const url = await getSignedUrl(s3Client, getCmd, { expiresIn: 3600 });
    const response = await fetch(url, { method: 'HEAD' });

    console.log(`   üì° Status: ${response.status}`);
    if (response.status === 200) {
      console.log('   ‚úÖ Arquivo 10MB: FUNCIONOU');
    } else {
      console.log('   ‚ùå Arquivo 10MB: FALHOU');
    }
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
  }

  // RESUMO FINAL
  console.log('\n\n' + '='.repeat(70));
  console.log('\nüí° AN√ÅLISE DOS RESULTADOS:\n');
  console.log('Se arquivos NOVOS funcionam mas v√≠deos ANTIGOS n√£o:');
  console.log('   ‚Üí Os v√≠deos foram criados com ACL incorreta');
  console.log('   ‚Üí Solu√ß√£o: Re-upload dos v√≠deos');
  console.log('');
  console.log('Se NENHUM arquivo funciona (nem novos):');
  console.log('   ‚Üí H√° uma pol√≠tica de bucket bloqueando presigned URLs');
  console.log('   ‚Üí Ou configura√ß√£o de CORS/VPC endpoint');
  console.log('');
  console.log('Se TODOS os arquivos funcionam:');
  console.log('   ‚Üí Era problema de propaga√ß√£o (resolvido!)');
  console.log('\n' + '='.repeat(70) + '\n');
}

diagnoseComplete().catch(console.error);
