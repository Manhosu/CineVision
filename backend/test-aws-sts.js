require('dotenv').config();
const { STSClient, GetCallerIdentityCommand } = require('@aws-sdk/client-sts');
const { S3Client, ListBucketsCommand, GetBucketLocationCommand } = require('@aws-sdk/client-s3');

console.log('üîç VERIFICA√á√ÉO: Identidade AWS e Permiss√µes\n');
console.log('='.repeat(70));

async function verifyIdentity() {
  const stsClient = new STSClient({
    region: 'us-east-2',
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    },
  });

  const s3Client = new S3Client({
    region: 'us-east-2',
    credentials: {
      accessKeyId: process.env.AWS_ACCESS_KEY_ID,
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
    },
  });

  // TESTE 1: Verificar identidade
  console.log('\nüìä TESTE 1: Identifica√ß√£o do usu√°rio AWS');
  try {
    const identity = await stsClient.send(new GetCallerIdentityCommand({}));

    console.log('   ‚úÖ Identidade recuperada:');
    console.log(`   ‚Ä¢ Account: ${identity.Account}`);
    console.log(`   ‚Ä¢ User ID: ${identity.UserId}`);
    console.log(`   ‚Ä¢ ARN: ${identity.Arn}`);

    // Verificar se √© usu√°rio IAM ou role assumida
    if (identity.Arn.includes(':assumed-role/')) {
      console.log('   ‚ö†Ô∏è  Esta √© uma ROLE ASSUMIDA (n√£o √© usu√°rio IAM direto)');
      console.log('   ‚Üí Roles podem ter pol√≠ticas de sess√£o que bloqueiam presigned URLs');
    } else if (identity.Arn.includes(':user/')) {
      console.log('   ‚úÖ Este √© um USU√ÅRIO IAM direto');
    }
  } catch (error) {
    console.log(`   ‚ùå Erro ao obter identidade: ${error.message}`);
    if (error.name === 'ExpiredToken') {
      console.log('   ‚Üí Token de sess√£o expirado!');
    }
  }

  // TESTE 2: Listar buckets
  console.log('\nüìä TESTE 2: Permiss√£o para listar buckets');
  try {
    const buckets = await s3Client.send(new ListBucketsCommand({}));
    console.log(`   ‚úÖ Consegue listar ${buckets.Buckets.length} buckets`);

    const cinevisionBucket = buckets.Buckets.find(b => b.Name === 'cinevision-video');
    if (cinevisionBucket) {
      console.log(`   ‚úÖ Bucket 'cinevision-video' encontrado`);
      console.log(`   ‚Ä¢ Criado em: ${cinevisionBucket.CreationDate}`);
    } else {
      console.log(`   ‚ö†Ô∏è  Bucket 'cinevision-video' N√ÉO encontrado na lista`);
      console.log('   ‚Üí Pode indicar problema de permiss√£o ou regi√£o');
    }
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
  }

  // TESTE 3: Verificar localiza√ß√£o do bucket
  console.log('\nüìä TESTE 3: Localiza√ß√£o do bucket cinevision-video');
  try {
    const location = await s3Client.send(new GetBucketLocationCommand({
      Bucket: 'cinevision-video',
    }));

    const bucketRegion = location.LocationConstraint || 'us-east-1';
    console.log(`   ‚úÖ Regi√£o do bucket: ${bucketRegion}`);

    if (bucketRegion !== 'us-east-2') {
      console.log(`   ‚ö†Ô∏è  ATEN√á√ÉO: Bucket est√° em ${bucketRegion} mas estamos usando us-east-2`);
      console.log('   ‚Üí Isso pode causar problemas com presigned URLs');
    } else {
      console.log(`   ‚úÖ Regi√£o correta (us-east-2)`);
    }
  } catch (error) {
    console.log(`   ‚ùå Erro: ${error.message}`);
  }

  // TESTE 4: Verificar se h√° session token
  console.log('\nüìä TESTE 4: Verificar tipo de credencial');
  console.log(`   ‚Ä¢ AWS_ACCESS_KEY_ID: ${process.env.AWS_ACCESS_KEY_ID}`);
  console.log(`   ‚Ä¢ AWS_SECRET_ACCESS_KEY: ${process.env.AWS_SECRET_ACCESS_KEY ? '[SET]' : '[NOT SET]'}`);
  console.log(`   ‚Ä¢ AWS_SESSION_TOKEN: ${process.env.AWS_SESSION_TOKEN ? '[SET - usando credenciais tempor√°rias]' : '[NOT SET - usando credenciais permanentes]'}`);

  if (process.env.AWS_SESSION_TOKEN) {
    console.log('');
    console.log('   ‚ö†Ô∏è  ATEN√á√ÉO: Session tokens (credenciais tempor√°rias) podem n√£o funcionar com presigned URLs!');
    console.log('   ‚Üí Presigned URLs requerem credenciais PERMANENTES de usu√°rio IAM');
    console.log('   ‚Üí Session tokens expiram e invalidam as presigned URLs');
  } else {
    console.log('');
    console.log('   ‚úÖ Usando credenciais permanentes (sem session token)');
  }

  console.log('\n' + '='.repeat(70));
  console.log('\nüí° PR√ìXIMOS PASSOS:\n');
  console.log('Se o problema persistir com todas as configura√ß√µes corretas:');
  console.log('   1. Verificar se h√° AWS Organizations SCPs bloqueando');
  console.log('   2. Verificar se h√° VPC Endpoint policies');
  console.log('   3. Tentar gerar presigned URL com outro usu√°rio IAM');
  console.log('   4. Contatar suporte AWS para verificar logs do CloudTrail');
  console.log('\n' + '='.repeat(70) + '\n');
}

verifyIdentity().catch(console.error);
