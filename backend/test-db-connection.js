require('dotenv').config();
const { Client } = require('pg');
const dns = require('dns');

// Configurar DNS para preferir IPv4
dns.setDefaultResultOrder('ipv4first');
dns.setServers(['8.8.8.8', '8.8.4.4']);

const connectionString = process.env.SUPABASE_DATABASE_URL;

console.log('üîç Testando conectividade com Supabase (Configura√ß√£o Produ√ß√£o)...');
console.log('URL de conex√£o:', connectionString ? 'Configurada' : 'N√ÉO CONFIGURADA');

if (!connectionString) {
  console.error('‚ùå SUPABASE_DATABASE_URL n√£o est√° configurada no .env');
  process.exit(1);
}

// Extrair hostname da URL
const url = new URL(connectionString);
const hostname = url.hostname;

console.log(`\nüåê Testando resolu√ß√£o DNS para: ${hostname}`);

// Fun√ß√£o para testar conectividade com retry
async function testConnection(retries = 3) {
  for (let i = 0; i < retries; i++) {
    console.log(`\nüîÑ Tentativa ${i + 1}/${retries}...`);
    
    const client = new Client({
      connectionString: connectionString,
      ssl: {
        rejectUnauthorized: false
      },
      connectionTimeoutMillis: 10000, // 10 segundos
      query_timeout: 5000, // 5 segundos
    });

    try {
      console.log('üîå Conectando ao Supabase...');
      await client.connect();
      console.log('‚úÖ Conex√£o com Supabase estabelecida com sucesso!');
      
      console.log('üîç Executando query de teste...');
      const result = await client.query('SELECT NOW() as current_time, version() as pg_version');
      console.log('‚úÖ Query de teste executada:', result.rows[0]);
      
      await client.end();
      console.log('‚úÖ Teste de conectividade conclu√≠do com sucesso!');
      return true;
      
    } catch (error) {
      console.error(`‚ùå Tentativa ${i + 1} falhou:`, error.code, error.message);
      
      if (client._connected) {
        await client.end();
      }
      
      if (i === retries - 1) {
        console.log('\nüí° Diagn√≥stico de problemas:');
        
        if (error.code === 'ENOTFOUND') {
          console.log('üîç Problema: DNS n√£o consegue resolver o hostname');
          console.log('   - Verificar conectividade com internet');
          console.log('   - Verificar se o projeto Supabase est√° ativo');
          console.log('   - Verificar se a URL est√° correta');
        } else if (error.code === 'ENETUNREACH') {
          console.log('üîç Problema: Rede n√£o consegue alcan√ßar o servidor');
          console.log('   - Verificar configura√ß√µes de IPv6');
          console.log('   - Verificar firewall/proxy');
          console.log('   - Tentar rede diferente ou VPN');
        } else if (error.code === 'ECONNREFUSED') {
          console.log('üîç Problema: Conex√£o recusada pelo servidor');
          console.log('   - Verificar se o servi√ßo est√° rodando');
          console.log('   - Verificar credenciais de acesso');
        } else if (error.code === 'ETIMEDOUT') {
          console.log('üîç Problema: Timeout na conex√£o');
          console.log('   - Verificar lat√™ncia da rede');
          console.log('   - Verificar se h√° bloqueios de ISP');
        }
        
        return false;
      }
      
      // Aguardar antes da pr√≥xima tentativa
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
}

// Executar teste
testConnection().then(success => {
  if (success) {
    console.log('\nüéâ Sistema pronto para produ√ß√£o com Supabase!');
    process.exit(0);
  } else {
    console.log('\n‚ùå Falha na conectividade com Supabase');
    process.exit(1);
  }
});