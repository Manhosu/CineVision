{
  "openapi": "3.0.3",
  "info": {
    "title": "Cine Vision API",
    "description": "Netflix-like streaming platform with Telegram integration API",
    "version": "1.0.0",
    "contact": {
      "name": "Cine Vision Team",
      "email": "dev@cinevision.com"
    },
    "license": {
      "name": "Private License",
      "url": "https://cinevision.com/license"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3001/api/v1",
      "description": "Development server"
    },
    {
      "url": "https://staging-api.cinevision.com/api/v1",
      "description": "Staging server"
    },
    {
      "url": "https://api.cinevision.com/api/v1",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "content",
      "description": "Movies and series management"
    },
    {
      "name": "purchases",
      "description": "Purchase history and transactions"
    },
    {
      "name": "payments",
      "description": "Payment processing (PIX, Card)"
    },
    {
      "name": "admin",
      "description": "Administrative operations"
    },
    {
      "name": "users",
      "description": "User management"
    },
    {
      "name": "telegrams",
      "description": "Telegram bot integration"
    },
    {
      "name": "health",
      "description": "Health check and system status"
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": ["health"],
        "summary": "Health check endpoint",
        "responses": {
          "200": {
            "description": "API is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": ["auth"],
        "summary": "Register new user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": ["auth"],
        "summary": "Login user",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/content/movies": {
      "get": {
        "tags": ["content"],
        "summary": "Get all movies",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "category",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Movies retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MoviesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/purchases": {
      "get": {
        "tags": ["purchases"],
        "summary": "Get user purchases",
        "security": [{"bearerAuth": []}],
        "responses": {
          "200": {
            "description": "Purchases retrieved successfully"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      },
      "post": {
        "tags": ["purchases"],
        "summary": "Create new purchase",
        "security": [{"bearerAuth": []}],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePurchaseDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Purchase created successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/payments/pix": {
      "post": {
        "tags": ["payments"],
        "summary": "Create PIX payment",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PixPaymentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "PIX payment created successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/payments/webhook": {
      "post": {
        "tags": ["payments"],
        "summary": "Payment webhook handler",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/telegrams/webhook": {
      "post": {
        "tags": ["telegrams"],
        "summary": "Telegram bot webhook handler",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook processed successfully"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "OK"
          },
          "message": {
            "type": "string",
            "example": "Cine Vision API is running"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RegisterDto": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "example": "Jo√£o Silva"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "joao@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "example": "strongPassword123"
          },
          "phone": {
            "type": "string",
            "example": "+5511999999999"
          },
          "telegram_username": {
            "type": "string",
            "example": "@joaosilva"
          }
        }
      },
      "LoginDto": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "joao@example.com"
          },
          "password": {
            "type": "string",
            "example": "strongPassword123"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "access_token": {
            "type": "string"
          },
          "refresh_token": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "telegram_id": {
            "type": "string",
            "nullable": true
          },
          "telegram_username": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "enum": ["user", "admin", "moderator"]
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "banned", "pending"]
          },
          "blocked": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Content": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "poster_url": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "price_cents": {
            "type": "integer"
          },
          "duration_minutes": {
            "type": "integer",
            "nullable": true
          },
          "release_year": {
            "type": "integer",
            "nullable": true
          },
          "director": {
            "type": "string",
            "nullable": true
          },
          "cast": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "genres": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "storage_path": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "enum": ["movie", "series", "documentary"]
          },
          "availability": {
            "type": "string",
            "enum": ["site", "telegram", "both"]
          },
          "status": {
            "type": "string",
            "enum": ["draft", "published", "archived"]
          },
          "is_featured": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MoviesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Movie"
            }
          },
          "total": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          },
          "limit": {
            "type": "integer"
          }
        }
      },
      "CreatePurchaseDto": {
        "type": "object",
        "required": ["content_id"],
        "properties": {
          "content_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PixPaymentDto": {
        "type": "object",
        "required": ["amount", "purchase_id"],
        "properties": {
          "amount": {
            "type": "number",
            "format": "decimal"
          },
          "purchase_id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "Purchase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "content_id": {
            "type": "string",
            "format": "uuid"
          },
          "payment_provider_id": {
            "type": "string",
            "nullable": true
          },
          "amount_cents": {
            "type": "integer"
          },
          "currency": {
            "type": "string",
            "example": "BRL"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "paid", "failed", "refunded"]
          },
          "provider_meta": {
            "type": "object",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "purchase_id": {
            "type": "string",
            "format": "uuid"
          },
          "provider": {
            "type": "string",
            "enum": ["pix", "credit_card", "debit_card", "boleto", "telegram"]
          },
          "provider_payment_id": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": ["pending", "processing", "completed", "failed", "cancelled", "refunded"]
          },
          "webhook_payload": {
            "type": "object",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ContentRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "requested_title": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "year": {
            "type": "integer",
            "nullable": true
          },
          "status": {
            "type": "string",
            "enum": ["pending", "in_progress", "completed", "rejected", "cancelled"]
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high", "urgent"]
          },
          "notification_sent": {
            "type": "boolean"
          },
          "vote_count": {
            "type": "integer"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "SystemLog": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string",
            "enum": ["auth", "payment", "purchase", "content", "user", "telegram", "system", "api", "security"]
          },
          "level": {
            "type": "string",
            "enum": ["debug", "info", "warn", "error", "fatal"]
          },
          "entity_id": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string"
          },
          "meta": {
            "type": "object",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "Conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "NotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}